import fetch from 'node-fetch'

import { NEXT_PUBLIC_BACKEND_URL } from '../../../../../../../common/constants'
import { PageProps } from '../../../../../../../common/types'
import SortedBarChart from './SortedBarChart'

type Response = {
  expenditures: any[]
}

async function getCenterExpendituresByOffice(params: Record<string, string & string[]>) {
  const { dateFrom, dateTo, officeName, count } = params

  const searchParams = new URLSearchParams(
    `dateFrom=${dateFrom}&dateTo=${dateTo}&officeName=${decodeURIComponent(officeName)}`
  )

  if (count !== '30') {
    searchParams.append('count', count)
  }

  const response = await fetch(
    `${NEXT_PUBLIC_BACKEND_URL}/expenditure/center/office?${searchParams}`
  )
  if (!response.ok) throw new Error(await response.text())

  return (await response.json()) as Response | null
}

export default async function CenterExpendituresByOfficePage({ params }: PageProps) {
  const centerExpenditures = await getCenterExpendituresByOffice(params)
  console.log('ðŸ‘€ ~ centerExpenditures:', centerExpenditures)

  return (
    <>
      {centerExpenditures && (
        <>
          <h2 className="text-2xl mt-6 text-center">ì„¸ë¶€ì‚¬ì—…ë³„ êµ­íšŒí™•ì •ê¸ˆì•¡</h2>
          <h5 className="text-sm mt-2 text-center">ë‹¨ìœ„: ë°±ë§Œ</h5>
        </>
      )}

      {centerExpenditures && typeof centerExpenditures === 'object' ? (
        <SortedBarChart id="123" data={centerExpenditures.expenditures} />
      ) : (
        <div className="text-center">{centerExpenditures}</div>
      )}
    </>
  )
}
